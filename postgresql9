#!/bin/ksh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

. /lib/svc/share/smf_include.sh

SVCPROP=/usr/bin/svcprop
SVCCFG=/usr/sbin/svccfg

# SMF_FMRI is the name of the target service. This allows multiple instances 
# to use the same script.

function getproparg
{
  typeset SMF_FMRI=$1 property=$2

  typeset val=$(${SVCPROP} -p ${property} $SMF_FMRI)
  [[ -n "$val" ]] && print -- $val
}

function check_data_dir
{
  print -- "DEBUG: SMF_FMRI is [$SMF_FMRI]"
  print -- "DEBUG: SVCCFG   is [$SVCCFG]"
  if [[ "$PGINIT" == "false" ]]; then
    print -- "Notice: postgresql9/data directory $PGDATA is not initialized"
    print -- "        Calling '$PGBIN/initdb -D $PGDATA' to initialize"
    $PGBIN/initdb -D $PGDATA
    if (( $? != 0 )); then
      print -- "Error: initdb failed"
      print -- "Hint : If database is already initialized set postgresql9/initialized property to true."
      print -- "        svccfg -s $SMF_FMRI \"setprop postgresql9/initialized = boolean: true\""
      print -- "        svccfg -s $SMF_FMRI refresh"
      exit $SMF_EXIT_ERR
    fi
    ${SVCCFG} -s $SMF_FMRI "setprop postgresql9/initialized = boolean: true"
    ${SVCCFG} -s $SMF_FMRI refresh
  fi

  if [[ ! -d $PGDATA ]]; then
    print -- "Error: postgresql9/data directory $PGDATA does not exist"
    exit $SMF_EXIT_ERR_CONFIG
  fi

  if [[ ! -w $PGDATA ]]; then
    print -- "Error: postgresql9/data directory $PGDATA is not writable by postgres"
    exit $SMF_EXIT_ERR_CONFIG
  fi


  if [[ ! -d $PGDATA/base || ! -d $PGDATA/global || ! -f $PGDATA/PG_VERSION ]]; then
    if [[ $(ls -a $PGDATA | wc -w) -le 2 ]]; then
      print -- "Error: postgresql9/data directory $PGDATA is empty, but it should be initialized"
      print -- "Hint : check your mountpoints"
    else
      print -- "Error: postgresql9/data directory $PGDATA is not empty, nor is it a valid PostgreSQL data directory"
    fi
    exit $SMF_EXIT_ERR_CONFIG
  fi
}

PGBIN=$(getproparg $SMF_FMRI postgresql9/bin)
print -- "PGBIN: $PGBIN"
PGDATA=$(getproparg $SMF_FMRI postgresql9/data)
print -- "PGDATA: $PGDATA"
PGLOG=$(getproparg $SMF_FMRI postgresql9/log)
print -- "PGLOG: $PGLOG"
PGINIT=$(getproparg $SMF_FMRI postgresql9/initialized)
print -- "PGINIT: $PGINIT"

if [[ -z $SMF_FMRI ]]; then
  print -- "Error: SMF framework variables are not initialized"
  exit $SMF_EXIT_ERR
fi

if [[ -z $PGDATA ]]; then
  print -- "Error: postgresql9/data property not set"
  exit $SMF_EXIT_ERR_CONFIG
fi

if [[ -z $PGLOG ]]; then
  print -- "Error: postgresql9/log property not set"
  exit $SMF_EXIT_ERR_CONFIG
fi


case "$1" in
  'start')
    check_data_dir
    $PGBIN/pg_ctl -D $PGDATA -l $PGDATA/$PGLOG start
    ;;

  'stop')
    $PGBIN/pg_ctl -D $PGDATA stop
    ;;

  'refresh')
    $PGBIN/pg_ctl -D $PGDATA reload
    ;;

  *)
    print -- "Usage: $0 {start|stop|refresh}"
    exit 1
    ;;

esac
exit $SMF_EXIT_OK

